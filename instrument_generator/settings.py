"""
Django settings for instrument_generator project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from django.urls import reverse_lazy

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# ------------------------------------------------------------------------------
# SECURITY & DEBUG
# ------------------------------------------------------------------------------

SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY and os.getenv("DJANGO_ENV") == "production":
    raise ValueError("No SECRET_KEY set for production environment!")

DEBUG = os.getenv("DEBUG", "False") == "True"
allowed_hosts = os.getenv("ALLOWED_HOSTS", "")
ALLOWED_HOSTS = [h.strip() for h in allowed_hosts.split(",") if h.strip()]

if DEBUG and not ALLOWED_HOSTS:
    ALLOWED_HOSTS = ["127.0.0.1", "localhost"]

CSRF_TRUSTED_ORIGINS = [
    "https://doc-gen.eu",
    "https://www.doc-gen.eu",
    "https://35.156.89.125",
]


# ------------------------------------------------------------------------------
# APPLICATIONS
# ------------------------------------------------------------------------------

INSTALLED_APPS = [
    # Django core
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Your apps
    "instruments",
    "accounts",
    "mailer",
    "widget_tweaks",
    # Third‑party
    "storages",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.contrib.auth.middleware.LoginRequiredMiddleware",
]

ROOT_URLCONF = "instrument_generator.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "instrument_generator.wsgi.application"


# ------------------------------------------------------------------------------
# DATABASE
# ------------------------------------------------------------------------------

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT", "5432"),
    }
}


# ------------------------------------------------------------------------------
# AUTHENTICATION
# ------------------------------------------------------------------------------

AUTH_USER_MODEL = "accounts.CustomUser"
AUTHENTICATION_BACKENDS = ["accounts.auth_backends.ApprovedUserBackend"]
LOGIN_URL = reverse_lazy("accounts:login")
LOGIN_REDIRECT_URL = "/instruments/submissions/"
LOGOUT_REDIRECT_URL = "/instruments/submissions/"


# ------------------------------------------------------------------------------
# PASSWORD VALIDATION
# ------------------------------------------------------------------------------

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# ------------------------------------------------------------------------------
# INTERNATIONALIZATION
# ------------------------------------------------------------------------------

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True


# ------------------------------------------------------------------------------
# STORAGES (Django ≥4.2 API) – Static files on S3
# ------------------------------------------------------------------------------

STORAGES = {
    "staticfiles": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {
            # required
            "bucket_name": os.getenv("AWS_STORAGE_BUCKET_NAME"),
            # region
            "region_name": os.getenv("AWS_S3_REGION_NAME", "eu-central-1"),
            # path prefix in the bucket
            "location": "static",
            # canned ACL (public-read for admin assets)
            # "default_acl": "public-read",
            # object parameters, e.g. cache control
            "object_parameters": {"CacheControl": "max-age=86400"},
            # overwrite behavior
            "file_overwrite": True,
            # remove querystring auth from URLs
            "querystring_auth": False,
            # custom domain for serving static via S3
            "custom_domain": (
                f"{os.getenv('AWS_STORAGE_BUCKET_NAME')}"
                f".s3.{os.getenv('AWS_S3_REGION_NAME','eu-central-1')}.amazonaws.com"
            ),
        },
    },
    # Uncomment and configure to also put media/uploads on S3:
    # "default": {
    #     "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
    #     "OPTIONS": {
    #         "bucket_name": os.getenv("AWS_STORAGE_BUCKET_NAME"),
    #         "region_name": os.getenv("AWS_S3_REGION_NAME", "eu-central-1"),
    #         "location": "media",
    #         "default_acl": "public-read",
    #         "object_parameters": {"CacheControl": "max-age=86400"},
    #         "querystring_auth": False,
    #     },
    # },
}

# URLs for static assets
STATIC_URL = f"https://{STORAGES['staticfiles']['OPTIONS']['custom_domain']}/static/"

# STATIC_ROOT is only needed if you run collectstatic locally.
# With the STORAGES API uploads go straight to S3.
STATIC_ROOT = BASE_DIR / "staticfiles_collected"


# ------------------------------------------------------------------------------
# SECURITY
# ------------------------------------------------------------------------------

SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_HSTS_SECONDS = 3600  # increase to a year (31536000) once stable


# ------------------------------------------------------------------------------
# EMAIL
# ------------------------------------------------------------------------------

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "mail.privateemail.com"
EMAIL_PORT = 465
EMAIL_USE_SSL = True
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.getenv("EMAIL_HOST_USER")


# ------------------------------------------------------------------------------
# OTHER SETTINGS
# ------------------------------------------------------------------------------

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
# ensure pdflatex is on PATH for any TeX subprocess calls
os.environ["PATH"] += os.pathsep + "/usr/bin/pdflatex"


# ------------------------------------------------------------------------------
# LOGGING
# ------------------------------------------------------------------------------

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {"console": {"class": "logging.StreamHandler"}},
    "root": {"handlers": ["console"], "level": "INFO"},
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        }
    },
}
